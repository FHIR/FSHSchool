# This IG YML file is inspired by the ImplementationGuide resource
# and also draws from package.json, package-list.json, and ig.ini.
# That said, it is structured for ease-of-use, so it is not strictly
# conformant to any of those existing configuration formats.

# SUSHI will use id as both id and packageId in the IG unless a
# specific packageId is also provided in this file.
id: fhir.us.example
canonical: http://hl7.org/fhir/us/example
url: http://hl7.org/fhir/us/example/ImplementationGuide/fhir.us.example
name: ExampleIG
title: "HL7 FHIR Implementation Guide: Example IG Release 1 - US Realm | STU1"
description: Example IG exercises many of the fields in a SUSHI configuration.
status: active
license: CC0-1.0
date: 2020-02-26
version: 1.0.0

# Although fhirVersions is 0..* in the ImplementationGuide resource
# it can be a single item OR and array here (but so far SUSHI only
# supports 4.0.1 anyway).
fhirVersion: 4.0.1

# The following two lines correspond to items that used to be in
# ig.ini but were moved to IG.definition.parameter. For
# consistency within this file, the names are represented using
# camelcase, but if authors use the formal parameter names, SUSHI
# will recognize them as well. In either case, they'll be copied
# to the IG JSON using the formal names.
copyrightYear: 2019+
releaseLabel: STU1

# The publisher can be a single item or a list, each with a name and
# optional url and/or email. The first publisher's name will be used
# as IG.publisher.  The contact details and/or additional publishers
# will be translated into IG.contact values.
publisher:
  name: HL7 FHIR Management Group
  url: http://www.hl7.org/Special/committees/fhirmg
  email: fmg@lists.HL7.org

# Those who need more control or want to add additional details to the contact values can use
# contact directly and follow the format outlined in the ImplementationGuide resource and
# ContactDetail.
contact:
  - name: Bob Smith
    telecom:
      - system: email
        value: bobsmith@example.org
        use: work

# The jurisdiction can be a single item or a list. The FHIR Shorthand
# code syntax can be used here.
jurisdiction: urn:iso:std:iso:3166#US "United States of America"

# The dependencies property corresponds to IG.dependsOn. The key is the
# package id and the value is the version (or dev/current). For advanced
# use cases, the value can be an object with keys for `uri` and `version`.
# For R5 ImplementationGuides, the object can also have a key for `reason`.
dependencies:
  hl7.fhir.us.core: 3.1.0
  hl7.fhir.us.mcode:
    id: mcode
    uri: http://hl7.org/fhir/us/mcode/ImplementationGuide/hl7.fhir.us.mcode
    version: 1.0.0

# The global property corresponds to the IG.global property, but it
# uses the type as the YAML key and the profile as its value. Since
# FHIR does not explicitly disallow more than one profile per type,
# neither do we; the value can be a single profile URL or an array
# of profile URLs.
global:
  Patient: http://example.org/fhir/StructureDefinition/my-patient-profile
  Encounter: http://example.org/fhir/StructureDefinition/my-encounter-profile

# NOTE: All of the properties of IG.definition are abstracted to
# individual top-level configuration properties (below). This
# definition property should only be used to provide extensions
# that have a context of IG.definition.
definition:
  extension:
    - url: http://example.org/example/ig-definition-ext
      valueBoolean: true

# The resources property corresponds to IG.definition.resource.
# SUSHI can auto-generate all of the resource entries based on
# the FSH definitions and/or information in any user-provided
# JSON or XML resource files. If the generated entries are not
# sufficient or complete, however, the author can add entries
# here. If a generated entry matches the reference, it will
# not be added to SUSHI output. The format follows IG.definition.resource
# with the following differences:
#   * use IG.definition.resource.reference.reference as the YAML key
#   * specify "omit" to omit a FSH-generated resource from the
#     resource list.
#   * groupingId can be used, but top-level groups syntax may be a
#     better option (see below).
# The following are simple examples to demonstrate what this might
# look like:
resources:
  Patient/my-example-patient:
    name: My Example Patient
    description: An example Patient
    exampleBoolean: true
  Patient/bad-example: omit

# For R5 ImplementationGuides, the example[x] property was replaced
# with isExample. A profile property is also included. These can be
# specified directly in configuration. Profile can be a single item
# or an array.
# An example resources configuration for an R5 ImplementationGuide:
# resources:
#   Patient/my-example-patient:
#     name: My Example Patient
#     description: An example Patient
#     isExample: true
#     profile: http://example.org/fhir/StructureDefinition/my-patient-profile

# Groups can control certain aspects of the IG generation.  The IG
# documentation recommends that authors use the default groups that
# are provided by the templating framework, but if authors want to
# use their own instead, they can use the mechanism below.  This will
# create IG.definition.grouping entries and associate the individual
# resource entries with the corresponding groupIds.
groups:
  GroupA:
    name: Group A
    description: The Alpha Group
    resources:
      - StructureDefinition/animal-patient
      - StructureDefinition/arm-procedure
  GroupB:
    name: Group B
    description: The Beta Group
    resources:
      - StructureDefinition/bark-control
      - StructureDefinition/bee-sting

# The pages property corresponds to IG.definition.page. SUSHI can
# auto-generate the page list, but if the author includes pages in
# this file, it is assumed that the author will fully manage the
# pages section and SUSHI will not generate any page entries.
# The page file name is used as the key. If title is not provided,
# then the title will be generated from the file name.  If a
# generation value is not provided, it will be inferred from the
# file name extension.  Any subproperties that are valid filenames
# with supported extensions (e.g., .md/.xml) will be treated as
# sub-pages.
#
# For R5 ImplementationGuides, the IG.definition.page element now
# supports a source[x] element. SUSHI will generate sourceUrl
# based on the name if it is not provided. To provide a source,
# add a key/value pair subproperty with the type slice as the key.
pages:
  index.md:
    title: Example Home
  implementation.xml:
  examples.xml:
    title: Examples Overview
    simpleExamples.xml:
    complexExamples.xml:

# The ImplementationGuide resource defines several other properties
# not represented above. These properties can be used as-is and
# should follow the format defined in ImplementationGuide:
# * meta
# * implicitRules
# * language
# * text
# * contained
# * extension
# * modifierExtension
# * experimental
# * useContext
# * copyright
# * packageId

# The R5 ImplementationGuide resource defines additional properties
# not represented above. These properties can be used as-is and
# should follow the format defined in ImplementationGuide:
# * copyrightLabel
# * versionAlgorithm[x], which should be specified with the type slice (e.g. versionAlgorithmString)

# The menu property will be used to generate the input/menu.xml file.
# The menu is represented as a simple structure where the YAML key
# is the menu item name and the value is the URL. The IG publisher
# currently only supports one level deep on sub-menus.
# To provide a custom menu.xml file, do not include this property and
# include a `menu.xml` file in input/includes.
menu:
  Home: index.html
  Artifacts:
    Profiles: artifacts.html#2
    Extensions: artifacts.html#3
    Value Sets: artifacts.html#4
  Downloads: downloads.html
  History: http://hl7.org/fhir/us/example/history.html

# The parameters property represents IG.definition.parameter. Rather
# than a list of code/value pairs (as in the ImplementationGuide
# resource), the code is the YAML key. If a parameter allows repeating
# values, the value in the YAML should be a sequence/array. For parameters
# defined by core FHIR see: http://build.fhir.org/codesystem-guide-parameter-code.html.
# For parameters defined by the FHIR Tools IG  see:
# http://build.fhir.org/ig/FHIR/fhir-tools-ig/branches/master/CodeSystem-ig-parameters.html
parameters:
  excludettl: true
  validation: [allow-any-extensions, no-broken-links]
  show-inherited-invariants: false

# For R5 ImplementationGuides, the IG.definition.parameter.code became a Coding.
# In this case, the YAML key becomes the code.code. If the code provided is in the
# value set bound in the IG definition (see: http://hl7.org/fhir/2022Sep/valueset-guide-parameter-code.html),
# that system is automatically set. If no system is provided, SUSHI will default the system
# to the system for the IG Parameter Codes
# (see: http://build.fhir.org/ig/FHIR/fhir-tools-ig/branches/master/CodeSystem-ig-parameters.html).
# To use a different system, the YAML key can be a FSH code.
# An example parameters configuration for an R5 ImplementationGuide:
# parameters:
#   generate-xml: true
#   validation: [allow-any-extensions, no-broken-links]
#   http://example.org/fhir/other-system#example: false

# The FSHOnly flag indicates if only FSH resources should be exported.
# If set to true, no IG related content will be generated.
# The default value for this property is false.
FSHOnly: false

# When set to true, the "short" and "definition" field on the root element of an Extension will
# be set to the "Title" and "Description" of that Extension. Default is true.
applyExtensionMetadataToRoot: false

# The instanceOptions property is used to configure certain aspects of how SUSHI processed instances.
# See the individual option definitions below for more detail.
instanceOptions:
  # Determines for which types of Instances SUSHI will automatically set meta.profile
  # if InstanceOf references a profile. Options are:
  # - always: Set meta.profile for all Instances of profiles (default)
  # - never: Do not set meta.profile on any Instances
  # - inline-only: Set meta.profile for only Instances of profiles with Usage set to #inline
  # - standalone-only: Set meta.profile for only Instances of profiles where Usage is any value other than #inline
  setMetaProfile: always
  # Determines for which types of Instances SUSHI will automatically set id
  # if InstanceOf references a profile. Options are:
  # - always: Set id for all Instances (default)
  # - standalone-only: Set id for only Instances where Usage is any value other than #inline
  setId: always
  # When set to true, slices must be referred to by name and not only by a numeric index in order to be used
  # in an Instance's assignment rule. All slices appear in the order in which they are specified in FSH rules.
  manualSliceOrdering: true
